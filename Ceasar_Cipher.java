
import java.awt.Image;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Windows 10 Pro
 */
public class Ceasar_Cipher extends javax.swing.JFrame {
    

        String path; // globally declared path for browsed file
         int key;  // globally declared variable encryption key;
     // collection of Alphabets, numbers and symbols within a single  String 
     // to be converted to charArray
     // the purpose of this declaration is to make the encrypted file decrypted to its original text file without using ascii values
     //since  some ascii codes usually havin the value of less than 32 are non printable, it makes the decryption difficult
     //  the String contains new line as char inluding space
final String alphaNumerics=  "\n !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
    
    
    /**
     * Creates new form Encrypt_Decrypt
     */
    public Ceasar_Cipher() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textlabel = new javax.swing.JLabel();
        pathtextfield = new javax.swing.JTextField();
        javax.swing.JLabel keylabel = new javax.swing.JLabel();
        encryptlabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        encrypttextarea = new javax.swing.JTextArea();
        decryptlabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        decrypttextarea = new javax.swing.JTextArea();
        encryptbutton = new javax.swing.JButton();
        decryptbutton = new javax.swing.JButton();
        clearbutton = new javax.swing.JButton();
        inputbutton = new javax.swing.JButton();
        filenamelabel = new javax.swing.JLabel();
        filenametextfield = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        inputedfiletextarea = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        keychombo_box = new javax.swing.JComboBox<>();
        savebutton = new javax.swing.JButton();
        statusLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Ceasar Cipher Assignment(Ermias Fikru , ID:1832/12)");
        setBackground(new java.awt.Color(51, 255, 0));
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        setForeground(java.awt.Color.orange);
        setMinimumSize(null);
        setSize(new java.awt.Dimension(1100, 800));

        textlabel.setBackground(new java.awt.Color(51, 0, 51));
        textlabel.setFont(new java.awt.Font("Gill Sans MT Condensed", 1, 36)); // NOI18N
        textlabel.setForeground(new java.awt.Color(102, 0, 51));
        textlabel.setText("    Encryption Decryption Tool");

        pathtextfield.setBackground(new java.awt.Color(153, 153, 255));
        pathtextfield.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        pathtextfield.setForeground(new java.awt.Color(255, 255, 255));
        pathtextfield.setText(".../path");
        pathtextfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pathtextfieldActionPerformed(evt);
            }
        });

        keylabel.setFont(new java.awt.Font("Rockwell Condensed", 1, 18)); // NOI18N
        keylabel.setForeground(new java.awt.Color(255, 0, 51));
        keylabel.setText("key");

        encryptlabel.setFont(new java.awt.Font("Kristen ITC", 1, 18)); // NOI18N
        encryptlabel.setForeground(new java.awt.Color(153, 0, 153));
        encryptlabel.setText("Ciphertext:");

        encrypttextarea.setBackground(new java.awt.Color(153, 153, 255));
        encrypttextarea.setColumns(20);
        encrypttextarea.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        encrypttextarea.setForeground(new java.awt.Color(255, 255, 255));
        encrypttextarea.setRows(5);
        jScrollPane1.setViewportView(encrypttextarea);

        decryptlabel.setFont(new java.awt.Font("Kristen ITC", 1, 18)); // NOI18N
        decryptlabel.setForeground(new java.awt.Color(153, 0, 153));
        decryptlabel.setText("plaintext:");

        decrypttextarea.setBackground(new java.awt.Color(153, 153, 255));
        decrypttextarea.setColumns(20);
        decrypttextarea.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        decrypttextarea.setForeground(new java.awt.Color(255, 255, 255));
        decrypttextarea.setRows(5);
        jScrollPane2.setViewportView(decrypttextarea);

        encryptbutton.setBackground(new java.awt.Color(255, 204, 204));
        encryptbutton.setFont(new java.awt.Font("Lucida Calligraphy", 1, 18)); // NOI18N
        encryptbutton.setForeground(new java.awt.Color(102, 102, 102));
        encryptbutton.setText("Encrypt ");
        encryptbutton.setFocusable(false);
        encryptbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptbuttonActionPerformed(evt);
            }
        });

        decryptbutton.setBackground(new java.awt.Color(255, 204, 204));
        decryptbutton.setFont(new java.awt.Font("Lucida Calligraphy", 1, 18)); // NOI18N
        decryptbutton.setForeground(new java.awt.Color(102, 102, 102));
        decryptbutton.setText("Decrypt ");
        decryptbutton.setFocusable(false);
        decryptbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decryptbuttonActionPerformed(evt);
            }
        });

        clearbutton.setBackground(new java.awt.Color(255, 204, 204));
        clearbutton.setFont(new java.awt.Font("Forte", 1, 18)); // NOI18N
        clearbutton.setForeground(new java.awt.Color(51, 51, 0));
        clearbutton.setText("Clear");
        clearbutton.setToolTipText("");
        clearbutton.setFocusable(false);
        clearbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearbuttonActionPerformed(evt);
            }
        });

        inputbutton.setBackground(new java.awt.Color(204, 204, 204));
        inputbutton.setFont(new java.awt.Font("Lucida Calligraphy", 1, 18)); // NOI18N
        inputbutton.setForeground(new java.awt.Color(51, 0, 51));
        inputbutton.setText("File Browser");
        inputbutton.setBorderPainted(false);
        inputbutton.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        inputbutton.setFocusable(false);
        inputbutton.setName(""); // NOI18N
        inputbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputbuttonActionPerformed(evt);
            }
        });

        filenamelabel.setFont(new java.awt.Font("Modern No. 20", 1, 18)); // NOI18N
        filenamelabel.setForeground(new java.awt.Color(102, 0, 102));
        filenamelabel.setText("File Name:");

        filenametextfield.setBackground(new java.awt.Color(255, 204, 204));
        filenametextfield.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        filenametextfield.setForeground(new java.awt.Color(255, 255, 255));
        filenametextfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filenametextfieldActionPerformed(evt);
            }
        });

        inputedfiletextarea.setBackground(new java.awt.Color(153, 153, 255));
        inputedfiletextarea.setColumns(20);
        inputedfiletextarea.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        inputedfiletextarea.setForeground(new java.awt.Color(255, 255, 255));
        inputedfiletextarea.setRows(5);
        jScrollPane3.setViewportView(inputedfiletextarea);

        jLabel1.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(153, 0, 0));
        jLabel1.setText("     Original text");

        keychombo_box.setBackground(new java.awt.Color(204, 255, 204));
        keychombo_box.setEditable(true);
        keychombo_box.setFont(new java.awt.Font("Ink Free", 1, 18)); // NOI18N
        keychombo_box.setForeground(new java.awt.Color(255, 255, 255));
        keychombo_box.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9" }));
        keychombo_box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keychombo_boxActionPerformed(evt);
            }
        });

        savebutton.setBackground(new java.awt.Color(255, 204, 204));
        savebutton.setFont(new java.awt.Font("Forte", 1, 18)); // NOI18N
        savebutton.setForeground(new java.awt.Color(0, 51, 0));
        savebutton.setText("Save ");
        savebutton.setFocusable(false);
        savebutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savebuttonActionPerformed(evt);
            }
        });

        statusLabel.setBackground(new java.awt.Color(0, 102, 51));
        statusLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(statusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(textlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 511, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(inputbutton)
                            .addGap(44, 44, 44)
                            .addComponent(pathtextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 433, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(filenamelabel, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(filenametextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(51, 51, 51)
                                .addComponent(keylabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(keychombo_box, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 462, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 100, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(decryptlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(decryptbutton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(encryptlabel)
                            .addComponent(encryptbutton))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 433, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(clearbutton)
                    .addComponent(savebutton))
                .addGap(29, 29, 29))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(textlabel)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inputbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pathtextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(filenamelabel)
                        .addComponent(filenametextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(keylabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(keychombo_box, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(encryptlabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(encryptbutton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(66, 66, 66)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(decryptlabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(decryptbutton))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(statusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 5, Short.MAX_VALUE)
                        .addComponent(savebutton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(clearbutton)
                        .addGap(128, 128, 128))))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {decryptbutton, encryptbutton, inputbutton, jLabel1, savebutton});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pathtextfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pathtextfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pathtextfieldActionPerformed

    private void inputbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputbuttonActionPerformed
        
    
        
        // open a file chooser to be extracted and shown on text area
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File("User.home"));
        
        FileNameExtensionFilter filter = new FileNameExtensionFilter("*.choose only text document", "txt", "docx");
        fileChooser.addChoosableFileFilter(filter);
        int result = fileChooser.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            
            File selectedFile = fileChooser.getSelectedFile();
            path = selectedFile.getAbsolutePath();
            String name = selectedFile.getName();

            pathtextfield.setText(path);
            filenametextfield.setText(name);

            try {
                FileReader reader = new FileReader(path);
                BufferedReader br = new BufferedReader(reader); // It buffers the characters in order to enable efficient reading of text data
                inputedfiletextarea.read(reader, null);
                br.close();
                inputedfiletextarea.requestFocus();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Ceasar_Cipher.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Ceasar_Cipher.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else if (result == JFileChooser.CANCEL_OPTION) {
// do nothing if canceled
        }
    }//GEN-LAST:event_inputbuttonActionPerformed

    private void decryptbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decryptbuttonActionPerformed
        
        key = Integer.parseInt(keychombo_box.getSelectedItem().toString());
         key = -key;
       // encryptDecrypt(key);
       encryptDecrypt2(key); // key is passed after converted to its negative value for decryption operation
       statusLabel.setText("SUCCESFULLY DECRYPTED WITH KEY: "+ -key);
        
    }//GEN-LAST:event_decryptbuttonActionPerformed

    private void encryptbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptbuttonActionPerformed
       
         key = Integer.parseInt(keychombo_box.getSelectedItem().toString()); // gets the value selected in chombo box as string and converts it to integer
        // encryptDecrypt(key); // alternetive function called which is implemented using ascii values
encryptDecrypt(key); // invocked function which was implemented using index value of char array
statusLabel.setText("SUCCESFULLY ENCRYPTED WITH KEY: "+ key); // show event status translatedMessage on panel
        
    }//GEN-LAST:event_encryptbuttonActionPerformed

    private void keychombo_boxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keychombo_boxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_keychombo_boxActionPerformed

    private void filenametextfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filenametextfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_filenametextfieldActionPerformed

    private void clearbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearbuttonActionPerformed
       
        // set all fields to default values
        inputedfiletextarea.setText("");
      pathtextfield.setText("..../path");
      filenametextfield.setText("");
      keychombo_box.setSelectedItem(keychombo_box.getItemAt(2));
      statusLabel.setText("");
      encrypttextarea.setText("");
      decrypttextarea.setText("");
    }//GEN-LAST:event_clearbuttonActionPerformed

    private void savebuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savebuttonActionPerformed
       
          // saves the file to specified directory
        try {
            JFileChooser fileSaver = new JFileChooser();

            fileSaver.showSaveDialog(this);// opens the file saver window to select a location and also give names for the file

            File f = fileSaver.getSelectedFile();
            if (!Files.exists(f.toPath())) { // checks if file already exists or not  in specified directory

                
                pathtextfield.setText(f.toPath().toString());
                String name = f.getName();
                filenametextfield.setText(name);
                FileWriter writer = new FileWriter(f.toPath().toString());
                 BufferedWriter bw = new BufferedWriter(writer);
                  inputedfiletextarea.write(bw);
                bw.close();
                inputedfiletextarea.requestFocus();

                 
            } else {
                JOptionPane.showMessageDialog(this, "File exists \n please rename");// if file exist shows a translatedMessage 
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Aborted");//  aborts the saving if closed
        }
        
    }//GEN-LAST:event_savebuttonActionPerformed
public void encryptDecrypt(int k)
{
    
        int i = inputedfiletextarea.getText().length();
        char[] character = new char[i];
        char[] encrypted = new char[i];
       
  char[] convert =inputedfiletextarea.getText().toCharArray();
  char[] symbols =alphaNumerics.toCharArray();
  String translatedMessage="";
  int index;
  
        for (int j = 0; j < i; j++) {
          
            character[j] = convert[j];
            char rawChar = character[j];
            
           index = alphaNumerics.indexOf(rawChar);// gets the index value o characters
           
// algorithm to implement encryption and decryption
            int value;
            value = (index +k) % alphaNumerics.length();
            if(value<0){ // checks if the remainder is negative and adds the lenths of the symbols to make it positive
                value = value + alphaNumerics.length();
            }
            encrypted[j] = symbols[value];
             
                char c =encrypted[j];
                 
                        translatedMessage = translatedMessage + String.valueOf(c);
        }
       
           encrypttextarea.setText(translatedMessage); //  finally shows the encrypted or decrypted text to text area 
}
    
    public void encryptDecrypt2(int k){
     int i = encrypttextarea.getText().length();
        char[] character = new char[i];
        char[] encrypted = new char[i];
       
  char[] convert =encrypttextarea.getText().toCharArray();
  char[] symbols =alphaNumerics.toCharArray();
  String translatedMessage="";
  int index;
  
        for (int j = 0; j < i; j++) {
          
            character[j] = convert[j];
            char rawChar = character[j];
            
           index = alphaNumerics.indexOf(rawChar);// gets the index value o characters
           
// algorithm to implement encryption and decryption
            int value;
            value = (index +k) % alphaNumerics.length();
            if(value<0){ // checks if the remainder is negative and adds the lenths of the symbols to make it positive
                value = value + alphaNumerics.length();
            }
            encrypted[j] = symbols[value];
             
                char c =encrypted[j];
                 
                        translatedMessage = translatedMessage + String.valueOf(c);
        }
        decrypttextarea.setText(translatedMessage);
    
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ceasar_Cipher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ceasar_Cipher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ceasar_Cipher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ceasar_Cipher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ceasar_Cipher().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearbutton;
    private javax.swing.JButton decryptbutton;
    private javax.swing.JLabel decryptlabel;
    private javax.swing.JTextArea decrypttextarea;
    private javax.swing.JButton encryptbutton;
    private javax.swing.JLabel encryptlabel;
    private javax.swing.JTextArea encrypttextarea;
    private javax.swing.JLabel filenamelabel;
    private javax.swing.JTextField filenametextfield;
    private javax.swing.JButton inputbutton;
    private javax.swing.JTextArea inputedfiletextarea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JComboBox<String> keychombo_box;
    private javax.swing.JTextField pathtextfield;
    private javax.swing.JButton savebutton;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JLabel textlabel;
    // End of variables declaration//GEN-END:variables
}
